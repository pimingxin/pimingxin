{"version":3,"sources":["TodoInput.js","TodoItem.js","TodoList.js","store.js","serviceWorker.js","index.js","TodoApp.js"],"names":["connect","state","isAllCompleted","todos","every","it","done","dispatch","toggleAllStatus","type","addTodo","e","keyCode","target","value","trim","todoText","props","checked","onChange","onKeyUp","deleteTodo","idx","toggleTodoStatus","todo","content","onClick","map","key","mutations","produce","action","push","splice","createStore","mutation","showing","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOA+BeA,mBAnBf,SAAyBC,GACvB,MAAO,CACLC,eAAiBD,EAAME,MAAMC,OAAM,SAAAC,GAAE,OAAIA,EAAGC,YAIhD,SAA4BC,GAC1B,MAAO,CACLC,gBAAiB,kBAAMD,EAAS,CAACE,KAAK,qBACtCC,QAAS,SAACC,GACU,KAAdA,EAAEC,SAAkBD,EAAEE,OAAOC,MAAMC,SACrCR,EAAS,CAACE,KAAK,UAAUO,SAAUL,EAAEE,OAAOC,MAAMC,SAClDJ,EAAEE,OAAOC,MAAQ,QAOVd,EA5Bf,SAAmBiB,GACjB,OACE,6BACE,2BAAOR,KAAK,WAAWS,QAASD,EAAMf,eAAgBiB,SAAUF,EAAMT,kBACtE,2BAAOC,KAAK,OAAOW,QAASH,EAAMP,cCiBzBV,mBAXf,SAAyBC,GACvB,MAAO,MAET,SAA4BM,GAC1B,MAAO,CACLc,WAAW,SAACC,GAAD,OAASf,EAAS,CAACE,KAAK,aAAaa,SAChDC,iBAAmB,SAACD,GAAD,OAASf,EAAS,CAACE,KAAK,mBAAmBa,YAKnDtB,EArBf,SAAkBiB,GAChB,OACE,4BACG,2BAAOR,KAAK,WAAWS,QAASD,EAAMO,KAAKlB,KAAMa,SAAU,kBAAMF,EAAMM,iBAAiBN,EAAMK,QAC9F,8BAAOL,EAAMO,KAAKC,SAClB,4BAAQC,QAAS,kBAAMT,EAAMI,WAAWJ,EAAMK,OAA9C,SCkBQtB,mBAtBf,SAAyBC,GACvB,MAAO,CACLE,MAAMF,EAAME,UAIhB,SAA4BI,GAC1B,MAAO,KAeMP,EAZf,SAAkBiB,GAChB,OACE,4BAEIA,EAAMd,MAAMwB,KAAI,SAACH,EAAKF,GAAN,OACd,kBAAC,EAAD,CAAUM,IAAKJ,EAAKC,QAASD,KAAMA,EAAMF,IAAKA,W,cCJpDO,EAAY,CACdnB,QAAQoB,aAAQ,SAAC7B,EAAM8B,GACnB9B,EAAME,MAAM6B,KAAK,CACfP,QAAQM,EAAOf,cAKrBK,WAAWS,aAAQ,SAAC7B,EAAM8B,GACtB9B,EAAME,MAAM8B,OAAOF,EAAOT,IAAI,MAEhCC,iBAAiBO,aAAQ,SAAC7B,EAAM8B,GAC9B9B,EAAME,MAAM4B,EAAOT,KAAKhB,MAAQL,EAAME,MAAM4B,EAAOT,KAAKhB,SAK/C4B,eAAY,SAACjC,EAAM8B,GAChC,IAAII,EAAWN,EAAUE,EAAOtB,MAChC,OAAI0B,EACKA,EAASlC,EAAM8B,GAEf9B,IAlCC,CACVmC,QAAQ,MACRjC,MAAM,CAAC,CACLsB,QAAQ,IACRnB,MAAK,GACL,CACAmB,QAAQ,IACRnB,MAAK,MCEW+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCCD,WACb,OACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UDNQ,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6fa590a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction TodoInput(props){\r\n  return(\r\n    <div>\r\n      <input type=\"checkbox\" checked={props.isAllCompleted} onChange={props.toggleAllStatus} />\r\n      <input type=\"text\" onKeyUp={props.addTodo} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    isAllCompleted : state.todos.every(it => it.done)\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n  return {\r\n    toggleAllStatus: () => dispatch({type:'toggleAllStatus'}),\r\n    addTodo: (e) => {\r\n      if (e.keyCode === 13 && e.target.value.trim()){\r\n        dispatch({type:'addTodo',todoText: e.target.value.trim()})\r\n        e.target.value = ''\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoInput)","import {connect} from 'react-redux'\r\nimport React from 'react'\r\n\r\nfunction TodoItem(props){\r\n  return (\r\n    <li>\r\n       <input type=\"checkbox\" checked={props.todo.done} onChange={() => props.toggleTodoStatus(props.idx)} />\r\n       <span>{props.todo.content}</span>\r\n       <button onClick={() => props.deleteTodo(props.idx)}>X</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {}\r\n}\r\nfunction mapDispatchToProps(dispatch){\r\n  return {\r\n    deleteTodo:(idx) => dispatch({type:'deleteTodo',idx}),\r\n    toggleTodoStatus : (idx) => dispatch({type:'toggleTodoStatus',idx})\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoItem)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TodoItem from './TodoItem'\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n    todos:state.todos\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n  return {}\r\n}\r\n\r\nfunction TodoList(props){\r\n  return (\r\n    <ul>\r\n      {\r\n        props.todos.map((todo,idx) => \r\n          <TodoItem key={todo.content} todo={todo} idx={idx} />\r\n        )\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TodoList)","import { createStore } from 'redux'\r\nimport { produce } from 'immer'\r\n\r\nvar state = {\r\n  showing:'all',\r\n  todos:[{\r\n    content:'n',\r\n    done:false\r\n  },{\r\n    content:'m',\r\n    done:true\r\n  }]\r\n}\r\n\r\n\r\nvar mutations = {\r\n  addTodo:produce((state,action) => {\r\n      state.todos.push({\r\n        content:action.todoText\r\n      })\r\n    }),\r\n  \r\n\r\n  deleteTodo:produce((state,action) => {\r\n      state.todos.splice(action.idx,1)\r\n    }),\r\n    toggleTodoStatus:produce((state,action) => {\r\n      state.todos[action.idx].done = !state.todos[action.idx].done\r\n    }),\r\n\r\n  };\r\n\r\nexport default createStore((state,action) => {\r\n  var mutation = mutations[action.type]\r\n  if (mutation){\r\n    return mutation(state,action)\r\n  }else{\r\n    return state\r\n  }\r\n},state)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './TodoApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import TodoInput from \"./TodoInput\";\r\nimport TodoList from \"./TodoList\";\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport store from './store'\r\n\r\nexport default function TodoApp(){\r\n  return (\r\n    <Provider store={store}>\r\n      <div>\r\n        <TodoInput />\r\n        <TodoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}"],"sourceRoot":""}