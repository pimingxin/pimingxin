增删改查

物理层 链路层 网络层 传输层 应用层
01网线
UDP DHCP ARP
网络层

总线
集线器
MAC
mac地址
TPC
载波帧听
多路访问
指数退避
以太网帧结构
令牌环
交换机
ARP
arp广播
arp欺骗
arp风暴

网关

子网掩码 
IP地址
255.255.255.0
全1 对应是网络号 
全0 对应主机号
IP1 NETMASK IP2 相互于运算

IP分片
TTL time to leave
ICMP
tracert baidu.com
DHCP 动态主机配置协议

tracert 
TCP
UDP

路由器 路由表 同一个局域网 
同一个网线的路由器 可以不是同一个子网
255.255.255.255 独立出来一个网络

01
ETH 以太网帧
IP
UDP
DHCP

DNS
DNS包结构 域名协议

DHCP 67
DNS 53
NTP 网络时间协议 123

VPN 
NAT 网络地址转换

SNAT 发出去的
DNAT 收回来的
端口映射

NAT级联

DDNS动态域名服务

NAT路由器 屏蔽192.168.1.x

TCP

场景和需求
不保证送达
一个包很小
不保证按发送顺序送达

握手 挥手

三次握手 TCP

初始序列号 窗口大小

一次可靠的信息交换 需要三次握手
1：在吗？ 2：在噢。 1：好的我知道你在了


四次挥手
1：我没了 2：好的 2：我没了 1：好的
三次挥手
1：我没了 2：我也没了 好的 1：好的

三次挥手和四次挥手的区别 
没有数据传输的时候是三次 有数据传输的时候 是四次

空两位数据包用来确定

URG 紧急的
ACK 确认
PSH 不需要后续的数据包到达
RST 出现严重错误 重置
SYN 握手包 
FIN 挥手包 
SACK 选择性确认 TCP报文的接收者为了确保可靠性，在接收到一定数量的连续字节流后才发送确认 这是对TCP的扩展


ISN 初始化序列号
ip138
窗口大小16位
0 0 0 0 [_ _ _ _ 0 0 _ _ 0 0] _ _ _
从这个数据开始 能够收到多少数据 
窗口大小加确认号 可以获得窗口范围
如果_得到数据之后 就会往后移
只能发送窗口范围内的包
两边应该是同步的

拥塞控制 

顺序号  从1开始的随机数
确认号  也是随机数

缩放因子
握手 两个SYN 两个ACK
发送消息 PSH ACK ACK
不带中括号的才是包里的信息


流量控制 通过控制窗口的大小 就可以间接的调整发送和接收的率
需要很快的网速可以将窗口调整 变大

拥塞控制
积式减少   指数减少
和式增加   线性增加
慢启动 一开始 窗口小 速度低 以线性的方式增加 如果有丢包 速度开始降低

慢启动 拥塞避免 快速重传 快速恢复

reno
cvbic
bbr

启动了bbr算法的那一方发送的速率很高
能达到cvbic的10倍

测量连接的带宽 和测量连接的延迟 算出能够承载多少流量 保证每次发送的流量都是差不多满的


时间戳  例如 32位 大约有4G 如果1.5G位置的数据包 发送未被接收 暂时存在1.5G的位置 经过一轮之	后 有可能发生数据错误 

新的模式 不使用 顺序号的模式 粒度有点小 时间戳 记录时间  或者两者都有 按时间为单位

TCP状态转换图


关闭状态有可能进入两种状态 

作为服务器 监听状态 被动打开 或者 作为客户端 链接别人主动打开 发送SYN握手包

接收SYN 发送SYN ACK 


可靠传输
http 
ftp 文件传输协议
tls 安全传输层 


低延迟的 UDP协议
DHCP 动态主机配置协议 
DNS
NTP

TCP双工

///


0.0.0.0网卡上的每个地址 
udp4 基于ipv4的udp协议
127.x.x.x 指向自己的主机

两种类型的加密算法 
	对称加密     加密和解密 用的是同一个密码
	非对称加密    加密和解密 用的是不同的密码 密钥是一对（公钥，私钥）用公钥加密需要用			私钥解密，反之亦然



	RSA 


CA 认证机构
信任链
证书
电子签名



TLS 传输层安全

http
tls
tcp
ip
bth





构建https服务器
hs -o

http：127.0.0.1:8080/可以看到一个页面


首先 需要tcp监听某个端口
浏览器就会连接这个端口 然后在这个TCP上说的话 就是要看到网址的根目录 回一个消息 说 网址的根目录是什么 和发的内容是什么

查看所有正在被使用的端口 netstat -naop

不写端口 端口就是默认值 


curl http://localhost/foo

会展示页面内容


curl http://localhost/foo -o 888.html

可以下载页面到指定的html中


netstat


-nao


不能网上冲浪了怎么办
重启 重装

两种类型：
	QQ上不了
		连接目标服务器
	普通网页打不开
		DNS	
		连接目标，路由转发
			目标存在
				目标端口是否打开
			目标不存在


普通网页打不开
  ping baidu.com
  去ipconfig -all 查看以太网适配器 查看DNS服务器是否有问题
  nslookup - xxx.xxx.xxx.xx




GET marijijh HTTP/1.1
Host: twitter.com
User-Agent: navigator.userAgent

responseText

AJAX 
require 不能从跨域请求标签
script标签可以


用操作数据的方式操作DOM



状态码

HTTP/1.1 301 Moved 
永久移动到了

302 暂时移动到了

301 无法后退 302 可以后退

304 Not Modified未改变 
协商缓存


强缓存 
过期时间
expires 绝对时间 
age  
cache-control 首选！ 缓存相关


前端跳转：返回的页面根据条件通过js来跳转
HTTP跳转：用301/302+LOcation头来跳转

http跳转一般是使用请求头里的User-Agent头


Referer 正在加载的页面被那个网址使用了

content-length 区分多次连续请求
链接复用
pipe-line

XSS cross site scripting 跨站脚本攻击 跨越整个站点的脚本攻击

encodeURI()

content-security-policy 告诉浏览器 页面里的JS或其他资源 是否能被执行

CORS

cross origin resource sharing 跨域相关信息
Access-Control-Allow-Origin  		
Acces-Control-methods  			方法
Acces-Control-max-age
Acces-Control-header


跳转对xhr是透明的

CSRF Cross Site Request forgery
跨站请求伪造

域检请求

get('www.baidu.com',(data)=>{

})
https://

OPTIONS /aa.json HTTP/1.1
Referer:https://
Host:www.baidu.com
==
HTTP/1.1 200 OK 
Access-Control-Allow-Origin:*//允许
Access-Control-Max-Age:86400 //HTTP请求 以秒为单位 在8小时内有效
==
GET /aa.json HTTP/1.1
Referer:https://
Host:www.baidu.com
===
HTTP/1.1 200 OK
Access-Control-Allow-Origin:*// 两次都要有


RPC远程过程调用 

Content-Security-Policy: //限制当面html页面的安全策略。所以只需要给Content-Type为text/html的页面加上这个头就可以了

default-src 'none'; 

base-uri 'self'; 

block-all-mixed-content; //http https 禁止安全与不安全的混合协议

connect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com wss://live.github.com; 

font-src github.githubassets.com; //字体可以来源于哪个域名

form-action 'self' github.com gist.github.com; 

frame-ancestors 'none'; //当前页面可以被以iframe嵌套在哪个页面，none表示任何页面都不行

frame-src render.githubusercontent.com; //当面页面可以嵌套来自哪个域名的iframe

//页面可以加载来自哪个域的图片
img-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com *.githubusercontent.com customer-stories-feed.github.com; 

manifest-src 'self'; 

media-src 'none'; 

script-src github.githubassets.com; //页面可以运行来自哪域名的js

style-src 'unsafe-inline' github.githubassets.com//页面只能使用来自这些地方的样式



